package it.vige.rubia.resttest.forummodule.test;

import static it.vige.rubia.dto.TopicType.NORMAL;
import static java.text.DateFormat.getInstance;
import static java.util.Arrays.asList;
import static org.jboss.logging.Logger.getLogger;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.text.DateFormat;
import java.util.Date;
import java.util.List;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;

import org.jboss.logging.Logger;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import it.vige.rubia.dto.CategoryBean;
import it.vige.rubia.dto.ForumBean;
import it.vige.rubia.dto.ForumInstanceBean;
import it.vige.rubia.dto.MessageBean;
import it.vige.rubia.dto.PollBean;
import it.vige.rubia.dto.PostBean;
import it.vige.rubia.dto.PosterBean;
import it.vige.rubia.dto.TopicBean;
import it.vige.rubia.dto.TopicRequestBean;
import it.vige.rubia.resttest.RestCaller;

public class TopicTest extends RestCaller {

	private final static String url = "http://localhost:8080/rubia-forums-rest/services/forums/";
	private final static String authorization = "Basic cm9vdDpndG4=";

	private static Logger log = getLogger(ForumTest.class);

	private static Date today = new Date();

	private DateFormat testDateFormat = getInstance();

	@BeforeAll
	public static void setUp() {
		log.debug("started test");
		ForumInstanceBean forumInstanceBean = new ForumInstanceBean();
		forumInstanceBean.setId(1);

		CategoryBean categoryBean = new CategoryBean("First Test Category");
		categoryBean.setForumInstance(forumInstanceBean);
		Response response = post(url + "createCategory", authorization, categoryBean);
		CategoryBean category = response.readEntity(CategoryBean.class);

		ForumBean forumBean = new ForumBean("First Test Forum", "First Test Description", category);
		response = post(url + "createForum", authorization, forumBean);
		ForumBean forum = response.readEntity(ForumBean.class);

		PostBean postBean = new PostBean("First Test Body");
		postBean.setCreateDate(today);
		TopicBean topicBean = new TopicBean(forum, "First Test Topic", asList(new PostBean[] { postBean }), NORMAL,
				null);
		topicBean.setPoster(new PosterBean("root"));
		topicBean.setPoll(new PollBean());
		response = post(url + "createTopic", authorization, topicBean);
		PostBean post = response.readEntity(PostBean.class);
		assertNotNull(post);
		assertTrue(post.getAttachments().isEmpty());
		assertEquals(today, post.getCreateDate());
		assertEquals(0, post.getEditCount());
		assertNull(post.getEditDate());
		assertNotEquals(0, post.getId());
		MessageBean message = post.getMessage();
		assertEquals(true, message.getBBCodeEnabled());
		assertEquals(true, message.getHTMLEnabled());
		assertEquals(true, message.getSignatureEnabled());
		assertEquals(false, message.getSmiliesEnabled());
		assertTrue(message.getSubject().isEmpty());
		assertEquals("First Test Body", message.getText());
		PosterBean poster = post.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		TopicBean topic = post.getTopic();
		assertNotEquals(0, topic.getId());
		assertEquals(today, topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertTrue(topic.getSubject().isEmpty());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		forum = topic.getForum();
		category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertNull(forum.getWatches());
		List<TopicBean> topics = forum.getTopics();
		assertEquals(1, topics.size());
		assertEquals(topic, topics.get(0));
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		PollBean poll = topic.getPoll();
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		List<PostBean> posts = topic.getPosts();
		assertTrue(posts.isEmpty());

		postBean = new PostBean("Second Test Body");
		postBean.setCreateDate(today);
		topicBean = new TopicBean(forumBean, "Second Test Topic", asList(new PostBean[] { postBean }), NORMAL, null);
		topicBean.setPoster(new PosterBean("root"));
		topicBean.setForum(forum);
		response = post(url + "createTopicWithPoster", authorization, topicBean);
		TopicBean topic2 = response.readEntity(TopicBean.class);
		assertNotNull(topic2);
		assertNotEquals(0, topic2.getId());
		assertNull(topic2.getLastPostDate());
		assertEquals(0, topic2.getReplies());
		assertEquals(0, topic2.getStatus());
		assertEquals("Second Test Topic", topic2.getSubject());
		assertEquals(NORMAL, topic2.getType());
		assertEquals(0, topic2.getViewCount());
		forum = topic2.getForum();
		category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertTrue(forum.getWatches().isEmpty());
		topics = forum.getTopics();
		assertEquals(2, topics.size());
		assertEquals(topic, topics.get(0));
		assertEquals(topic2, topics.get(1));
		poster = topic2.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		poll = topic2.getPoll();
		assertNull(poll);
		posts = topic2.getPosts();
		assertTrue(posts.isEmpty());
	}

	@Test
	public void findAndUpdate() {
		Response response = get(url + "findTopics/1", authorization);
		List<TopicBean> topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});

		TopicBean topicBean = topicBeans.get(0);
		TopicRequestBean topicRequestBean = new TopicRequestBean();
		topicRequestBean.setTopic(topicBean);
		topicRequestBean.setStart(1);
		topicRequestBean.setPerPage(3);
		response = post(url + "findTopicsDesc", authorization, topicRequestBean);
		topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});
		assertEquals(1, topicBeans.size());
		TopicBean topic = topicBeans.get(0);
		assertNotEquals(0, topic.getId());
		assertNull(topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertEquals("Second Test Topic", topic.getSubject());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		ForumBean forum = topic.getForum();
		CategoryBean category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertTrue(forum.getWatches().isEmpty());
		List<TopicBean> topics = forum.getTopics();
		assertEquals(2, topics.size());
		topic = topics.get(0);
		assertNull(topic.getForum());
		PosterBean poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		PollBean poll = topic.getPoll();
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		List<PostBean> posts = topic.getPosts();
		assertTrue(posts.isEmpty());
		topic = topics.get(1);
		assertNull(topic.getForum());
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		assertNull(topic.getPoll());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());

		response = post(url + "findTopics", authorization, topicBean.getForum());
		topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});
		assertEquals(2, topicBeans.size());
		topic = topicBeans.get(0);
		assertNotEquals(0, topic.getId());
		assertEquals(today, topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertTrue(topic.getSubject().isEmpty());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		forum = topic.getForum();
		category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertTrue(forum.getWatches().isEmpty());
		topics = forum.getTopics();
		assertEquals(2, topics.size());
		topic = topics.get(0);
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		poll = topic.getPoll();
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		posts = topic.getPosts();
		assertEquals(0, posts.size());
		topic = topics.get(1);
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		assertNull(topic.getPoll());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());

		response = get(url + "findTopicsHot/2/3/1", authorization);
		topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});
		assertEquals(0, topicBeans.size());

		response = get(url + "findTopicsByLatestPosts/3/1", authorization);
		topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});
		assertEquals(2, topicBeans.size());
		topic = topicBeans.get(0);
		assertNotEquals(0, topic.getId());
		assertEquals(today, topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertTrue(topic.getSubject().isEmpty());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		forum = topic.getForum();
		category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertTrue(forum.getWatches().isEmpty());
		topics = forum.getTopics();
		assertEquals(2, topics.size());
		topic = topics.get(0);
		assertNull(topic.getForum());
		assertNotEquals(0, topic.getId());
		assertEquals(today, topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertTrue(topic.getSubject().isEmpty());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		assertNull(topic.getWatches());
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		poll = topic.getPoll();
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());
		topic = topics.get(1);
		assertNull(topic.getForum());
		assertNotEquals(0, topic.getId());
		assertNull(topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertEquals("Second Test Topic", topic.getSubject());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		assertNull(topic.getWatches());
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());
		topic = topicBeans.get(1);
		assertNotEquals(0, topic.getId());
		assertNull(topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertEquals("Second Test Topic", topic.getSubject());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		forum = topic.getForum();
		category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertTrue(forum.getWatches().isEmpty());
		topics = forum.getTopics();
		assertEquals(2, topics.size());
		topic = topics.get(0);
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		poll = topic.getPoll();
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());
		topic = topics.get(1);
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		assertNull(topic.getPoll());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());

		response = get(url + "findTopicsHottest/" + testDateFormat.format(today) + "/3/1", authorization);
		topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});
		assertEquals(1, topicBeans.size());
		topic = topicBeans.get(0);
		assertNotEquals(0, topic.getId());
		assertEquals(today, topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertTrue(topic.getSubject().isEmpty());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		forum = topic.getForum();
		category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertNull(forum.getWatches());
		topics = forum.getTopics();
		assertEquals(1, topics.size());
		assertEquals(topic, topics.get(0));
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		poll = topic.getPoll();
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());

		response = get(url + "findTopicsMostViewed/" + testDateFormat.format(today) + "/3/1", authorization);
		topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});
		assertEquals(1, topicBeans.size());
		topic = topicBeans.get(0);
		assertNotEquals(0, topic.getId());
		assertEquals(today, topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertTrue(topic.getSubject().isEmpty());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		forum = topic.getForum();
		category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertNull(forum.getWatches());
		topics = forum.getTopics();
		assertEquals(1, topics.size());
		assertEquals(topic, topics.get(0));
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		poll = topic.getPoll();
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());

		response = get(url + "findTopicById/" + topicBean.getId(), authorization);
		topicBean = response.readEntity(new GenericType<TopicBean>() {
		});
		assertEquals(1, topicBeans.size());
		topic = topicBeans.get(0);
		assertNotEquals(0, topic.getId());
		assertEquals(today, topic.getLastPostDate());
		assertEquals(0, topic.getReplies());
		assertEquals(0, topic.getStatus());
		assertTrue(topic.getSubject().isEmpty());
		assertEquals(NORMAL, topic.getType());
		assertEquals(0, topic.getViewCount());
		forum = topic.getForum();
		category = forum.getCategory();
		assertNull(category.getForumInstance());
		assertTrue(category.getForums().isEmpty());
		assertNotEquals(0, category.getId());
		assertEquals(20, category.getOrder());
		assertEquals("First Test Category", category.getTitle());
		assertEquals("First Test Description", forum.getDescription());
		assertNull(forum.getForumWatch());
		assertNotEquals(0, forum.getId());
		assertEquals("First Test Forum", forum.getName());
		assertEquals(10, forum.getOrder());
		assertEquals(1, forum.getPostCount());
		assertEquals(1, forum.getTopicCount());
		assertEquals(false, forum.getPruneEnable());
		assertEquals(0, forum.getPruneNext());
		assertEquals(0, forum.getStatus());
		assertNull(forum.getWatches());
		topics = forum.getTopics();
		assertEquals(1, topics.size());
		assertEquals(topic, topics.get(0));
		poster = topic.getPoster();
		assertEquals(0, poster.getPostCount());
		assertEquals("root", poster.getUserId());
		assertNotEquals(0, poster.getId());
		poll = topic.getPoll();
		assertNull(poll.getCreationDate());
		assertNotEquals(0, poll.getId());
		assertEquals(0, poll.getLength());
		assertTrue(poll.getOptions().isEmpty());
		assertNull(poll.getTitle());
		assertTrue(poll.getVoted().isEmpty());
		assertEquals(0, poll.getVotesSum());
		posts = topic.getPosts();
		assertTrue(posts.isEmpty());

		response = post(url + "updateTopic", authorization, topicBean);
		response.readEntity(new GenericType<List<TopicBean>>() {
		});
	}

	@AfterAll
	public static void stop() {
		log.debug("stopped test");

		Response response = get(url + "findTopics/1", authorization);
		List<TopicBean> topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});
		assertEquals(2, topicBeans.size(), "Topics size");

		topicBeans.forEach(x -> {
			get(url + "removeTopic/" + x.getId(), authorization);
		});
		response = get(url + "findTopics/1", authorization);
		topicBeans = response.readEntity(new GenericType<List<TopicBean>>() {
		});
		assertEquals(0, topicBeans.size(), "Topics size");

		response = get(url + "findForums/1", authorization);
		List<ForumBean> forumBeans = response.readEntity(new GenericType<List<ForumBean>>() {
		});
		assertEquals(3, forumBeans.size(), "Forums size");

		response = get(url + "findCategories/1", authorization);
		List<CategoryBean> categoryBeans = response.readEntity(new GenericType<List<CategoryBean>>() {
		});
		assertEquals(2, categoryBeans.size(), "Categories size");

		get(url + "removeForum/" + forumBeans.get(1).getId(), authorization);
		get(url + "removeCategory/" + categoryBeans.get(1).getId(), authorization);
	}

}
